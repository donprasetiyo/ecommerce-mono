version: "3.8"

services:
  db:
    image: postgres:16.2
    command: -c config_file=/etc/postgresql.conf
    container_name: ecommerce-mono-db
    restart: always
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DATABASE: ${PG_DB}
    ports: 
      - "${PG_PORT}:5432"     
    volumes:
      - pg_data_ecommerce_mono:/var/lib/postgresql/data
      - ./infra/postgres/custom.conf:/etc/postgresql.conf
      - ./infra/postgres/logs:/logs
    networks:
      - caddy_network

  db-backup:
    container_name: ecommerce-mono-db-backup
    image: tiredofit/db-backup:4.0.35
    volumes:
      - ./infra/postgres/backups:/backup
    environment:
      - TIMEZONE=Asia/Bangkok
      - CONTAINER_NAME=ecommerce-mono-db-backup
      - CONTAINER_ENABLE_MONITORING=FALSE
      - DEBUG_MODE=FALSE

      - BACKUP_JOB_CONCURRENCY=1
      - DEFAULT_CHECKSUM=NONE       
      - DEFAULT_COMPRESSION=ZSTD   
      - DEFAULT_BACKUP_INTERVAL=60   
      - DEFAULT_BACKUP_BEGIN=0000     
      - DEFAULT_CLEANUP_TIME=1440  

      - DB01_BACKUP_LOCATION=S3
      - DB01_S3_KEY_ID=${DB01_S3_KEY_ID}
      - DB01_S3_KEY_SECRET=${DB01_S3_KEY_SECRET}
      - DB01_S3_BUCKET=${DB01_S3_BUCKET}
      - DB01_S3_PATH=${DB01_S3_PATH}
      - DB01_S3_REGION=${DB01_S3_REGION}
      - DB01_S3_PROTOCOL=${DB01_S3_PROTOCOL}
      - DB01_S3_CERT_SKIP_VERIFY=${DB01_S3_CERT_SKIP_VERIFY}
      - DB01_TYPE=pgsql
      - DB01_HOST=ecommerce-mono-db
      - DB01_NAME=${PG_DB}
      - DB01_USER=${PG_USER}
      - DB01_PASS=${PG_PASSWORD}
    restart: always
    networks:
      - caddy_network

  web:
    image: ${WEB_IMAGE_ECR}:latest
    container_name: ecommerce-mono-web
    pull_policy: always
    restart: always
    networks:
      - caddy_network
    env_file:
      - path: ./.env
    ports:
      - ${WEB_PORT}:${WEB_PORT}
    depends_on:
      - db

  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: ${ZOO1_NAME}
    container_name: ecommerce-mono-${ZOO1_NAME}
    ports:
      - "${ZOO1_PORT_EXTERNAL}:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOO1_PORT_EXTERNAL}
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: ${ZOO1_NAME}:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: ecommerce-mono-kafka1
    container_name: ecommerce-mono-kafka1
    ports:
      - "${KAFKA1_PORT_EXTERNAL}:9092"
      - "${KAFKA1_PORT_EXTERNAL_2}:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://ecommerce-mono-kafka1:9092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:${KAFKA1_PORT_EXTERNAL},DOCKER://host.docker.internal:${KAFKA1_PORT_DOCKER}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "${ZOO1_NAME}:${ZOO1_PORT_EXTERNAL}"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - ${ZOO1_NAME}

  kafka2:
    image: confluentinc/cp-kafka:7.3.2
    hostname: ecommerce-mono-kafka2
    container_name: ecommerce-mono-kafka2
    ports:
      - "${KAFKA2_PORT_EXTERNAL}:9092"
      - "${KAFKA2_PORT_EXTERNAL_2}:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://ecommerce-mono-kafka2:9092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:${KAFKA2_PORT_EXTERNAL},DOCKER://host.docker.internal:${KAFKA2_PORT_DOCKER}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "${ZOO1_NAME}:${ZOO1_PORT_EXTERNAL}"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - ${ZOO1_NAME}

  kafka3:
    image: confluentinc/cp-kafka:7.3.2
    hostname: ecommerce-mono-kafka3
    container_name: ecommerce-mono-kafka3
    ports:
      - "${KAFKA3_PORT_EXTERNAL}:9092"
      - "${KAFKA3_PORT_EXTERNAL_2}:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://ecommerce-mono-kafka3:9092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:${KAFKA3_PORT_EXTERNAL},DOCKER://host.docker.internal:${KAFKA3_PORT_DOCKER}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "${ZOO1_NAME}:${ZOO1_PORT_EXTERNAL}"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - ${ZOO1_NAME}
      
networks:
  caddy_network:
    external: true
  kafka-net:
    driver: bridge

volumes:
  caddy_data:
    external: true
  caddy_config:
    external: true
  pg_data_ecommerce_mono:
   driver: local
