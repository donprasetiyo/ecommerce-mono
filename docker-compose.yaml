version: "3.8"

services:
  db:
    image: postgres:16.2
    command: -c config_file=/etc/postgresql.conf
    container_name: ecommerce-mono-db
    restart: always
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DATABASE: ${PG_DB}
    ports: 
      - "${PG_PORT}:5432"     
    volumes:
      - pg_data_ecommerce_mono:/var/lib/postgresql/data
      - ./infra/postgres/custom.conf:/etc/postgresql.conf
      - ./infra/postgres/logs:/logs
    networks:
      - caddy_network

  db-backup:
    container_name: ecommerce-mono-db-backup
    image: tiredofit/db-backup:4.0.35
    volumes:
      - ./infra/postgres/backups:/backup
    environment:
      - TIMEZONE=Asia/Bangkok
      - CONTAINER_NAME=ecommerce-mono-db-backup
      - CONTAINER_ENABLE_MONITORING=FALSE
      - DEBUG_MODE=FALSE

      - BACKUP_JOB_CONCURRENCY=1
      - DEFAULT_CHECKSUM=NONE       
      - DEFAULT_COMPRESSION=ZSTD   
      - DEFAULT_BACKUP_INTERVAL=60   
      - DEFAULT_BACKUP_BEGIN=0000     
      - DEFAULT_CLEANUP_TIME=1440  

      - DB01_BACKUP_LOCATION=S3
      - DB01_S3_KEY_ID=${DB01_S3_KEY_ID}
      - DB01_S3_KEY_SECRET=${DB01_S3_KEY_SECRET}
      - DB01_S3_BUCKET=${DB01_S3_BUCKET}
      - DB01_S3_PATH=${DB01_S3_PATH}
      - DB01_S3_REGION=${DB01_S3_REGION}
      - DB01_S3_PROTOCOL=${DB01_S3_PROTOCOL}
      - DB01_S3_CERT_SKIP_VERIFY=${DB01_S3_CERT_SKIP_VERIFY}
      - DB01_TYPE=pgsql
      - DB01_HOST=ecommerce-mono-db
      - DB01_NAME=${PG_DB}
      - DB01_USER=${PG_USER}
      - DB01_PASS=${PG_PASSWORD}
    restart: always
    networks:
      - caddy_network

  web:
    image: ${WEB_IMAGE_ECR}:latest
    container_name: ecommerce-mono-web
    pull_policy: always
    restart: always
    networks:
      - caddy_network
      - kafka-net
    env_file:
      - path: ./.env
    ports:
      - ${WEB_PORT}:${WEB_PORT}
    depends_on:
      - db
  # TODO: make environment for development
  # frontend:
  #   build:
  #     context: .
  #     target: development
  #     dockerfile: ./tooling/docker/next/Dockerfile
  #     args:
  #       - APP_NAME=web
  #       - PORT=${WEB_PORT}
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   command: tail -f /dev/null
  #   networks:
  #     - caddy_network
  #     - kafka-net
  #   env_file:
  #     - path: ./.env
  #   ports:
  #     - ${WEB_PORT}:${WEB_PORT}
  #   depends_on:
  #     - db

  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    hostname: zoo1
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 22181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zoo1:22888:23888
    ports:
      - "22181:22181"   # Expose Zookeeper client port
      # - "22888:22888"   # Expose Zookeeper quorum port
      # - "23888:23888"   # Expose Zookeeper election port
    extra_hosts:
      - "moby:127.0.0.1"
    networks:
      - kafka-net

  # init-kafka:
  #   image: confluentinc/cp-zookeeper:latest
  #   depends_on:
  #     - kafka-ssl-1
  #     - kafka-ssl-2
  #     - kafka-ssl-3
  #   entrypoint: [ '/bin/sh', '-c' ]
  #   command: |
  #     "
  #     # blocks until kafka is reachable
  #     kafka-topics --bootstrap-server localhost:19092 --list

  #     echo -e 'Creating kafka topics'
  #     kafka-topics --bootstrap-server localhost:19092 --create --if-not-exists --topic ecommercemonoEmailSend --replication-factor 1 --partitions 1
  #     kafka-topics --bootstrap-server localhost:19092 --create --if-not-exists --topic ecommercemonoEmailSend --replication-factor 1 --partitions 1

  #     echo -e 'Successfully created the following topics:'
  #     kafka-topics --bootstrap-server localhost:19092 --list
  #     "
  #   networks:
  #     - kafka-net

  # zookeeper-2:
  #   image: confluentinc/cp-zookeeper:latest
  #   environment:
  #     ZOOKEEPER_SERVER_ID: 2
  #     ZOOKEEPER_CLIENT_PORT: 32181
  #     ZOOKEEPER_TICK_TIME: 2000
  #     ZOOKEEPER_INIT_LIMIT: 5
  #     ZOOKEEPER_SYNC_LIMIT: 2
  #     ZOOKEEPER_SERVERS: localhost:22888:23888;localhost:32888:33888;localhost:42888:43888
  #   # network_mode: host
  #   ports:
  #     - "32181:32181"   # Expose Zookeeper client port
  #     - "32888:32888"   # Expose Zookeeper quorum port
  #     - "33888:33888"   # Expose Zookeeper election port
  #   extra_hosts:
  #     - "moby:127.0.0.1"
  #   networks:
  #     - kafka-net

  # zookeeper-3:
  #   image: confluentinc/cp-zookeeper:latest
  #   environment:
  #     ZOOKEEPER_SERVER_ID: 3
  #     ZOOKEEPER_CLIENT_PORT: 42181
  #     ZOOKEEPER_TICK_TIME: 2000
  #     ZOOKEEPER_INIT_LIMIT: 5
  #     ZOOKEEPER_SYNC_LIMIT: 2
  #     ZOOKEEPER_SERVERS: localhost:22888:23888;localhost:32888:33888;localhost:42888:43888
  #   # network_mode: host
  #   ports:
  #     - "42181:42181"   # Expose Zookeeper client port
  #     - "42888:42888"   # Expose Zookeeper quorum port
  #     - "43888:43888"   # Expose Zookeeper election port
  #   extra_hosts:
  #     - "moby:127.0.0.1"
  #   networks:
  #     - kafka-net

  kafka-ssl-1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka1
    container_name: kafka1
    depends_on:
      - zookeeper-1
      # - zookeeper-2
      # - zookeeper-3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zoo1:22181
      KAFKA_ADVERTISED_LISTENERS: SSL://${DOCKER_HOST_IP:-127.0.0.1}:19092
      KAFKA_SSL_KEYSTORE_FILENAME: kafka.broker1.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: broker1_keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: broker1_sslkey_creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.broker1.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: broker1_truststore_creds
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      KAFKA_SSL_CLIENT_AUTH: requested
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      KAFKA_SSL_TRUSTSTORE_PASSWORD: confluent
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.producer.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: confluent
      KAFKA_SSL_KEY_PASSWORD: confluent
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ${KAFKA_SSL_SECRETS_DIR}:/etc/kafka/secrets
    ports:
      - "19092:19092" 
    extra_hosts:
      - "moby:127.0.0.1"
    networks:
      - kafka-net

  # kafka-ssl-2:
  #   image: confluentinc/cp-kafka:latest
  #   hostname: kafka2
  #   container_name: kafka2
  #   depends_on:
  #     - zookeeper-1
  #     # - zookeeper-2
  #     # - zookeeper-3
  #   environment:
  #     KAFKA_BROKER_ID: 2
  #     KAFKA_ZOOKEEPER_CONNECT: zoo1:22181
  #     KAFKA_ADVERTISED_LISTENERS: SSL://${DOCKER_HOST_IP:-127.0.0.1}:29092
  #     KAFKA_SSL_KEYSTORE_FILENAME: kafka.broker2.keystore.jks
  #     KAFKA_SSL_KEYSTORE_CREDENTIALS: broker2_keystore_creds
  #     KAFKA_SSL_KEY_CREDENTIALS: broker2_sslkey_creds
  #     KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.broker2.truststore.jks
  #     KAFKA_SSL_TRUSTSTORE_CREDENTIALS: broker2_truststore_creds
  #     KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
  #     KAFKA_SSL_CLIENT_AUTH: requested
  #     KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
  #     KAFKA_SSL_TRUSTSTORE_PASSWORD: confluent
  #     KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.producer.keystore.jks
  #     KAFKA_SSL_KEYSTORE_PASSWORD: confluent
  #     KAFKA_SSL_KEY_PASSWORD: confluent
  #     KAFKA_SECURITY_PROTOCOL: SSL
  #   volumes:
  #     - ${KAFKA_SSL_SECRETS_DIR}:/etc/kafka/secrets
  #   ports:
  #     - "29092:29092" 
  #   extra_hosts:
  #     - "moby:127.0.0.1"
  #   networks:
  #     - kafka-net

  # kafka-ssl-3:
  #   image: confluentinc/cp-kafka:latest
  #   hostname: kafka3
  #   container_name: kafka3
  #   depends_on:
  #     - zookeeper-1
  #     # - zookeeper-2
  #     # - zookeeper-3
  #   environment:
  #     KAFKA_BROKER_ID: 3
  #     KAFKA_ZOOKEEPER_CONNECT: zoo1:22181
  #     KAFKA_ADVERTISED_LISTENERS: SSL://${DOCKER_HOST_IP:-127.0.0.1}:39092
  #     KAFKA_SSL_KEYSTORE_FILENAME: kafka.broker3.keystore.jks
  #     KAFKA_SSL_KEYSTORE_CREDENTIALS: broker3_keystore_creds
  #     KAFKA_SSL_KEY_CREDENTIALS: broker3_sslkey_creds
  #     KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.broker3.truststore.jks
  #     KAFKA_SSL_TRUSTSTORE_CREDENTIALS: broker3_truststore_creds
  #     KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
  #     KAFKA_SSL_CLIENT_AUTH: requested
  #     KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
  #     KAFKA_SSL_TRUSTSTORE_PASSWORD: confluent
  #     KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.producer.keystore.jks
  #     KAFKA_SSL_KEYSTORE_PASSWORD: confluent
  #     KAFKA_SSL_KEY_PASSWORD: confluent
  #     KAFKA_SECURITY_PROTOCOL: SSL
  #   volumes:
  #     - ${KAFKA_SSL_SECRETS_DIR}:/etc/kafka/secrets
  #   ports:
  #     - "39092:39092"   # Expose Kafka broker SSL port
  #   extra_hosts:
  #     - "moby:127.0.0.1"
  #   networks:
  #     - kafka-net

networks:
  caddy_network:
    external: true
  kafka-net:
    name: kafka-net

volumes:
  caddy_data:
    external: true
  caddy_config:
    external: true
  pg_data_ecommerce_mono:
   driver: local
