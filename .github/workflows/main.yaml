name: Docker image build and publish
on:
  push:
    branches:
      - main

jobs:
  docker:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubActions
          aws-region: us-east-1

      - name: Build web image and push to ECR
        shell: bash
        run: |
          touch .env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
          echo DATABASE_URL_PROD=${{ secrets.DATABASE_URL_PROD }} >> .env
          echo PG_HOST=${{ secrets.PG_HOST }} >> .env
          echo PG_HOST_PROD=${{ secrets.PG_HOST_PROD }} >> .env
          echo PG_USER=${{ secrets.PG_USER }} >> .env
          echo PG_PASSWORD=${{ secrets.PG_PASSWORD }} >> .env
          echo PG_NAME=${{ secrets.PG_NAME }} >> .env
          echo PG_PORT=${{ secrets.PG_PORT }} >> .env
          echo DB01_S3_KEY_ID=${{ secrets.DB01_S3_KEY_ID }} >> .env
          echo DB01_S3_KEY_SECRET=${{ secrets.DB01_S3_KEY_SECRET }} >> .env
          echo DB01_S3_BUCKET=${{ secrets.DB01_S3_BUCKET }} >> .env
          echo DB01_S3_PATH=${{ secrets.DB01_S3_PATH }} >> .env
          echo DB01_S3_REGION=${{ secrets.DB01_S3_REGION }} >> .env
          echo DB01_S3_PROTOCOL=${{ secrets.DB01_S3_PROTOCOL }} >> .env
          echo DB01_S3_CERT_SKIP_VERIFY=${{ secrets.DB01_S3_CERT_SKIP_VERIFY }} >> .env
          echo WEB_IMAGE_ECR=${{ secrets.WEB_IMAGE_ECR }} >> .env
          echo WEB_PORT=${{ vars.WEB_PORT }} >> .env
          echo WEB_BASE_URL=${{vars.WEB_BASE_URL}} >> .env
          echo ADMIN_BASE_URL=${{ vars.ADMIN_BASE_URL }} >> .env
          echo KAFKA_PASSPHRASE=${{ secrets.KAFKA_PASSPHRASE }} >> .env
          echo KAFKA_SSL_SECRETS_DIR=${{ vars.KAFKA_SSL_SECRETS_DIR }} >> .env
          cat .env
          cp .env apps/web/.env
          bash ./push-image.sh web ${{ secrets.WEB_IMAGE_ECR }} us-east-1 ${{ vars.WEB_PORT }} next

  
      - name: Run a multi-line script
        run: |
          mkdir -p ../build
          cp docker-compose.yaml ../build/
          cp .env ../build/
          cp ecr-login.sh ../build/
          tar -cvf deploy.tar ../build/
          
      - name: Copy env and docker compose
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          passphrase: ${{secrets.SERVER_PASSPHRASE}}
          source: "deploy.tar"
          target: "/root/single-vps-host"

      - name: run compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          passphrase: ${{secrets.SERVER_PASSPHRASE}}
          script: |
            cd /
            cd /root/single-vps-host
            tar -xf deploy.tar
            ls -a
            cd build
            chmod +x ecr-login.sh
            bash ./ecr-login.sh ${{ secrets.WEB_IMAGE_ECR }} us-east-1
            docker compose up -d
            docker stop single-vps-host-caddy_reverse_proxy-1
            docker remove single-vps-host-caddy_reverse_proxy-1 -v
            cd ..
            docker compose up -d
