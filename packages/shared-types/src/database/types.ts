import type { ColumnType } from "kysely";
export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;
export type Timestamp = ColumnType<Date, Date | string, Date | string>;

import type { UserStatus, GenerationStatus, AIModelPricingBasedOn, SubscriptionType, SubcriptionStatus, InvoiceStatus, TransactionType, TransactionStatus, PaymentMethod, WaitingListStatus } from "./enums";

export type AIModel = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    deleted_at: Timestamp | null;
    name: string;
    source: string;
    public_name: string;
    label: string;
    price_based_on: AIModelPricingBasedOn;
    icon: string;
};
export type AIModelPrice = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    deleted_at: Timestamp | null;
    from_date: Timestamp;
    to_date: Timestamp;
    currency_code: string;
    model_id: string;
    input_pertoken_price: string;
    output_pertoken_price: string;
    fee_pertransaction: string;
};
export type Chat = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    user_id: string;
    title: string;
};
export type Conversation = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    chat_id: string;
};
export type ConversationsOnTextGenerations = {
    text_generation_id: string;
    conversation_id: string;
};
export type Credit = {
    id: Generated<string>;
    public_id: string;
    balance: Generated<string>;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    user_id: string;
    expires_at: Timestamp;
    last_transaction: Timestamp | null;
};
export type Currency = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    name: string;
    code: string;
};
export type EmailVerificationCode = {
    id: Generated<string>;
    created_at: Generated<Timestamp>;
    code: string;
    user_id: string;
    email: string;
    expires_at: Timestamp;
};
export type ExpiredCredit = {
    id: Generated<string>;
    public_id: string;
    expired_amount: Generated<string>;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    expired_date: Timestamp;
    user_id: string;
};
export type Generation = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    user_id: string;
    deleted_at: Timestamp | null;
};
export type GenerationMetadata = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    generation_id: string;
    model_name: string;
    model_label: string;
    currency_code: string;
    input_pertoken_price: string;
    output_pertoken_price: string;
    fee_pertransaction: string;
    model_source: string;
    input: string;
    output: string;
    input_token: number;
    output_token: number;
    total_token: number;
    input_usage: string;
    output_usage: string;
    total_usage: string;
    total_spending: string;
    generation_status: GenerationStatus;
};
export type ImageGeneration = {
    id: Generated<string>;
    public_id: string;
    status: GenerationStatus;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    generation_id: string;
    conversation_id: string | null;
};
export type ImageInput = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    content: string;
    image_generation_id: string;
};
export type ImageOutput = {
    id: Generated<string>;
    public_id: string;
    status: GenerationStatus;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    content: string;
    image_input_id: string;
    image_generation_id: string;
};
export type Invoice = {
    id: Generated<string>;
    public_id: string;
    description: string | null;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    transaction_id: string;
    currency_code: string;
    customer_address_line_1: string | null;
    customer_address_line_2: string | null;
    customer_city: string | null;
    customer_country: string | null;
    customer_email: string | null;
    customer_id: string;
    customer_name: string | null;
    customer_postal_code: string | null;
    number: Generated<string>;
    total: string;
    due_date: Timestamp;
    invoice_date: Timestamp;
    paid_at: Timestamp | null;
    status: Generated<InvoiceStatus>;
    payment_method: PaymentMethod | null;
    payment_link: string;
};
export type InvoiceItem = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    name: string;
    quantity: number;
    unit_price: string;
    product_id: string;
    invoice_id: string;
    amount: string;
    vat_amount: string | null;
    vat_percentage: string | null;
};
export type OpenAIResponse = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    response_choices_finish_reason: string | null;
    response_choices_index: number;
    response_choices_message_content: string;
    response_choices_message_role: string | null;
    response_choices_logprops: string | null;
    response_created: string;
    response_id: string;
    response_model: string;
    response_object: string;
    response_usage_completion_tokens: number | null;
    response_usage_prompt_tokens: number | null;
    response_usage_total_tokens: number | null;
    generation_metadata_id: string | null;
};
export type PasswordResetToken = {
    id: Generated<string>;
    token_hash: string;
    user_id: string;
    expires_at: Timestamp;
};
export type PaypalCapture = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    capture_id: string;
    amount_value: string;
    amount_currency_code: string;
    capture_status: string;
    create_time: Timestamp;
    update_time: Timestamp;
    final_capture: boolean;
    seller_protection_status: string;
    seller_protection_dispute_categories: string[];
    seller_receivable_net_amount_value: string;
    seller_receivable_net_amount_currency_code: string;
    seller_receivable_paypal_fee_value: string;
    seller_receivable_paypal_fee_currency_code: string;
    seller_receivable_gross_amount_value: string;
    seller_receivable_gross_amount_currency_code: string;
    order_id: string | null;
};
export type PaypalPaymentSource = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    order_id: string | null;
    account_id: string;
    account_status: string;
    email_address: string;
    given_name: string;
    surname: string;
    country_code: string;
};
export type PaypalResponse = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    order_id: string;
    status: string;
    payer_id: string;
    payer_email: string;
    payer_given_name: string;
    payer_surname: string;
    payer_country: string;
};
export type Product = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    deleted_at: Timestamp | null;
    name: string;
    description: string;
    features: string[];
    includesUpcomingFeatures: boolean;
    note: string;
    paypal_product_id: string | null;
};
export type ProductPrice = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    from_date: Timestamp;
    to_date: Timestamp;
    price: string;
    currency_code: string;
    product_id: string;
    deleted_at: Timestamp | null;
};
export type Receipt = {
    id: Generated<string>;
    public_id: string;
    description: string | null;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    transaction_id: string;
    customer_address_line_1: string | null;
    customer_address_line_2: string | null;
    customer_city: string | null;
    customer_country: string | null;
    customer_email: string | null;
    customer_name: string | null;
    customer_postal_code: string | null;
    total: string;
    currency_code: string;
    customer_id: string;
    paid_at: Timestamp;
    number: Generated<string | null>;
    payment_method: PaymentMethod | null;
};
export type ReceiptItem = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    name: string;
    quantity: number;
    unit_price: string;
    receipt_id: string;
    amount: string;
    product_id: string;
    vat_amount: string | null;
    vat_percentage: string | null;
};
export type ReplicateResponse = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    prediction_official_model_name: string;
    prediction_id: string;
    prediction_status: string;
    prediction_hardware: string;
    prediction_created: Timestamp;
    prediction_input_prompt: string;
    prediction_input_template: string;
    prediction_logs: string;
    prediction_metrics_total_time: string;
    prediction_metrics_input_token_count: number;
    prediction_metrics_tokens_per_second: string;
    prediction_metrics_output_token_count: number;
    prediction_metrics_predict_time: string;
    generation_metadata_id: string | null;
};
export type Role = {
    id: Generated<string>;
    created_at: Generated<Timestamp>;
    name: string;
    description: string;
};
export type Session = {
    id: string;
    expires_at: Timestamp;
    user_id: string;
};
export type Subscription = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    user_id: string;
    cancelled_at: Timestamp | null;
    downgraded_at: Timestamp | null;
    downgraded_to_plan_id: string | null;
    upgraded_to_plan_id: string | null;
    ends_at: Timestamp;
    invoice_id: string;
    plan_id: string;
    renewed_at: Timestamp | null;
    renewed_subscription_id: string | null;
    starts_at: Timestamp;
    upgraded_at: Timestamp | null;
    status: SubcriptionStatus;
    deleted_at: Timestamp | null;
    receipt_id: string | null;
    paypal_subscription_id: string | null;
    transaction_id: string;
    auto_renewal: Generated<boolean>;
};
export type SubscriptionPlan = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    billing_interval: Generated<number>;
    product_id: string;
    deleted_at: Timestamp | null;
    paypal_plan_id: string | null;
};
export type TextGeneration = {
    id: Generated<string>;
    public_id: string;
    status: GenerationStatus;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    generation_id: string;
    edit_conversation_index: number | null;
    edit_mark: string | null;
    regenerate_conversation_index: number | null;
    regenerate_mark: string | null;
};
export type TextInput = {
    id: Generated<string>;
    public_id: string;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    content: string;
    text_generation_id: string;
};
export type TextOutput = {
    id: Generated<string>;
    public_id: string;
    status: GenerationStatus;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    content: string;
    text_input_id: string;
    text_generation_id: string;
};
export type Transaction = {
    id: Generated<string>;
    public_id: string;
    amount: string;
    transaction_type: TransactionType;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    paypal_transaction: unknown | null;
    user_id: string;
    generation_metadata_id: string | null;
    subscription_type: SubscriptionType | null;
    transaction_status: TransactionStatus;
    paypal_response_id: string | null;
    paypal_order_id: string | null;
};
export type User = {
    id: string;
    username: string;
    password_hash: string;
    email_verified: boolean;
    created_at: Generated<Timestamp>;
    discord_username: string | null;
    discord_user_id: string | null;
    discord_avatar_id: string | null;
    discord_email: string | null;
    discord_global_name: string | null;
    discord_locale: string | null;
    status: Generated<UserStatus>;
    deleted_at: Timestamp | null;
    address_line_1: string | null;
    address_line_2: string | null;
    city: string | null;
    country: string | null;
    currency_code: Generated<string>;
    email: string;
    name: string | null;
    postal_code: string | null;
    role_name: Generated<string>;
};
export type WaitingListUser = {
    id: Generated<string>;
    created_at: Generated<Timestamp>;
    updated_at: Generated<Timestamp>;
    email: string;
    status: WaitingListStatus;
};
export type DB = {
    AIModel: AIModel;
    AIModelPrice: AIModelPrice;
    Chat: Chat;
    Conversation: Conversation;
    ConversationsOnTextGenerations: ConversationsOnTextGenerations;
    Credit: Credit;
    Currency: Currency;
    EmailVerificationCode: EmailVerificationCode;
    ExpiredCredit: ExpiredCredit;
    Generation: Generation;
    GenerationMetadata: GenerationMetadata;
    ImageGeneration: ImageGeneration;
    ImageInput: ImageInput;
    ImageOutput: ImageOutput;
    Invoice: Invoice;
    InvoiceItem: InvoiceItem;
    OpenAIResponse: OpenAIResponse;
    PasswordResetToken: PasswordResetToken;
    PaypalCapture: PaypalCapture;
    PaypalPaymentSource: PaypalPaymentSource;
    PaypalResponse: PaypalResponse;
    Product: Product;
    ProductPrice: ProductPrice;
    Receipt: Receipt;
    ReceiptItem: ReceiptItem;
    ReplicateResponse: ReplicateResponse;
    Role: Role;
    Session: Session;
    Subscription: Subscription;
    SubscriptionPlan: SubscriptionPlan;
    TextGeneration: TextGeneration;
    TextInput: TextInput;
    TextOutput: TextOutput;
    Transaction: Transaction;
    User: User;
    WaitingListUser: WaitingListUser;
};
